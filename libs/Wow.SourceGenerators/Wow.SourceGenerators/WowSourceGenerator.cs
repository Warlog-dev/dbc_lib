using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using Microsoft.CodeAnalysis;
using Wow.SourceGenerators.Models;

namespace Wow.SourceGenerators;

[Generator(LanguageNames.CSharp)]
public sealed class WowSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterSourceOutput(context.AdditionalTextsProvider.Select(ToDbcClass), Generate);
    }

    private static ImmutableArray<DbcClass> ToDbcClass(AdditionalText txt, CancellationToken cancellationToken)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var dbcClasses = ImmutableArray.CreateBuilder<DbcClass>();
        
        var document = new XmlDocument();

        document.LoadXml(txt.GetText(cancellationToken)!.ToString());

        var nodes = document.ChildNodes[1].ChildNodes;

        foreach (var xmlClass in nodes.Cast<XmlElement>())
        {
            var properties = ImmutableArray.CreateBuilder<DbcProperty>();
            
            foreach (var xmlField in xmlClass.ChildNodes.Cast<XmlElement>())
            {
                var name = xmlField.Attributes.GetNamedItem("Name")!.Value!;
                var type = xmlField.Attributes.GetNamedItem("Type")!.Value!;
                var arraySizeStr = xmlField.Attributes.GetNamedItem("ArraySize")?.Value;
                var arraySize = arraySizeStr is null ? -1 : int.Parse(arraySizeStr);
                var isIndex = xmlField.Attributes.GetNamedItem("IsIndex")?.Value is not null;
                var isAutoGenerated = xmlField.Attributes.GetNamedItem("AutoGenerate")?.Value is not null;
                
                if (!properties.Any(x => x.Name.Equals(name, StringComparison.Ordinal)))
                    properties.Add(new DbcProperty(name, type, isIndex, isAutoGenerated, arraySize));
            }
            
            var className = xmlClass.Attributes.GetNamedItem("Name")!.Value!;
            
            dbcClasses.Add(new DbcClass(className, properties.ToImmutable()));
        }

        return dbcClasses.ToImmutable();
    }

    private static void Generate(SourceProductionContext context, ImmutableArray<DbcClass> dbcClasses)
    {
        foreach (var dbcClass in dbcClasses)
        {
            var builder = new StringBuilder()
                .AppendLine("// <auto-generated/>")
                .AppendLine()
                .AppendLine("using Wow.Dbc;")
                .AppendLine()
                .AppendLine("namespace Wow.Datacenter;")
                .AppendLine()
                .AppendLine($"public sealed class {dbcClass.Name}")
                .AppendLine("{");

            foreach (var dbcProperty in dbcClass.Properties)
            {
                var type = dbcProperty.Type is "loc" ? "DbcCultures" : dbcProperty.Type;

                var line = $"\tpublic {(dbcProperty.ArraySize >= 0 ? string.Empty : "required ")}{type}{(dbcProperty.ArraySize >= 0 ? "[]" : string.Empty)} {dbcProperty.Name} {{ get; set; }}";
                
                if (dbcProperty.ArraySize >= 0)
                    line += $" = new {type}[{dbcProperty.ArraySize}];";
                
                builder.AppendLine(line);

                if (dbcProperty != dbcClass.Properties.Last())
                    builder.AppendLine();
            }

            builder.AppendLine("}");
            
            context.AddSource($"{dbcClass.Name}.g.cs", builder.ToString());
        }
    }
}