using System.Collections.Immutable;
using System.Xml;
using Wow.Tools.ProtocolBuilder.Models;

namespace Wow.Tools.ProtocolBuilder.Parsers.Datacenter;

public sealed class DatacenterParser : IDatacenterParser
{
    public ImmutableArray<DbcClass> Parse(string fileName)
    {
        var dbcClasses = ImmutableArray.CreateBuilder<DbcClass>();
        
        var document = new XmlDocument();
        document.Load(fileName);
        
        var nodes = document.ChildNodes[1]!.ChildNodes;

        foreach (var xmlClass in nodes.Cast<XmlElement>())
        {
            var properties = ImmutableArray.CreateBuilder<DbcProperty>();
            
            foreach (var xmlField in xmlClass.ChildNodes.Cast<XmlElement>())
            {
                var name = xmlField.Attributes.GetNamedItem("Name")!.Value!;
                var type = xmlField.Attributes.GetNamedItem("Type")!.Value!;
                var arraySizeStr = xmlField.Attributes.GetNamedItem("ArraySize")?.Value;
                var arraySize = arraySizeStr is null ? -1 : int.Parse(arraySizeStr);
                var isIndex = xmlField.Attributes.GetNamedItem("IsIndex")?.Value is not null;
                var isAutoGenerated = xmlField.Attributes.GetNamedItem("AutoGenerate")?.Value is not null;
                
                if (!properties.Any(x => x.Name.Equals(name, StringComparison.Ordinal)))
                    properties.Add(new DbcProperty(name, type, isIndex, isAutoGenerated, arraySize));
            }
            
            var className = xmlClass.Attributes.GetNamedItem("Name")!.Value!;
            
            dbcClasses.Add(new DbcClass(className, properties.ToImmutable()));
        }

        return dbcClasses.ToImmutable();
    }
}